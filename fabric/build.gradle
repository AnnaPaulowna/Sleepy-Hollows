plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven { url = "https://maven.blamejared.com/" }
    maven { url = "https://api.modrinth.com/maven" }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"
    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"
    modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"
    modImplementation "com.github.glitchfiend:TerraBlender-fabric:${rootProject.minecraft_version}-${rootProject.terrablender_version}"

    modCompileOnlyApi("maven.modrinth:sodium:mc1.20.1-0.5.11")
    modCompileOnlyApi("maven.modrinth:iris:1.7.5+1.20.1")

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
